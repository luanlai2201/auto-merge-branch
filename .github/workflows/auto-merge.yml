name: Auto Merge to Develop

on:
  push:
    branches:
      - main

env:
  DEVELOP_BRANCH: develop

jobs:
  auto-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Merge main into develop
        run: |
          git checkout $DEVELOP_BRANCH
          if ! git merge main --no-edit; then
            echo "Error: Merge conflict detected"
            exit 1
          fi
          git push origin $DEVELOP_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Reset to nearest commit of develop and checkout to main
        if: failure()
        run: |
          git reset --hard origin/$DEVELOP_BRANCH
          git checkout main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read PR Template
        id: read_pr_template
        run: |
          PR_TEMPLATE_PATH=".github/PULL_REQUEST_TEMPLATE.md"
          if [ -f "$PR_TEMPLATE_PATH" ]; then
            echo "Reading the PR template from $PR_TEMPLATE_PATH"
            PR_BODY=$(cat $PR_TEMPLATE_PATH)
          else
            echo "PR template not found, using a default PR body"
            PR_BODY="This is a default PR body because no template was found."
          fi
          echo "::set-output name=PR_BODY::$PR_BODY"

      - name: Check for existing PR and create/update PR
        id: create_or_update_pr
        run: |
          BRANCH_NAME="main"
          BASE_BRANCH="develop"
          PR_TITLE="Auto PR: Update from GitHub Actions"
          PR_BODY="${{ steps.read_pr_template.outputs.PR_BODY }}"

          RESPONSE=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:$BRANCH_NAME&base=$BASE_BRANCH&state=open")

          PR_EXISTING_ID=$(echo $RESPONSE | jq '.[0].number')

          if [ "$PR_EXISTING_ID" != "null" ]; then
            echo "Updating existing PR with ID $PR_EXISTING_ID."
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls/$PR_EXISTING_ID \
              -d "{\"title\":\"$PR_TITLE\", \"body\":\"$PR_BODY\", \"head\":\"$BRANCH_NAME\", \"base\":\"$BASE_BRANCH\"}"
          else
            echo "No existing PR found. Creating a new one."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls \
              -d "{\"title\":\"$PR_TITLE\", \"body\":\"$PR_BODY\", \"head\":\"$BRANCH_NAME\", \"base\":\"$BASE_BRANCH\"}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Confirm PR Action
        run: |
          if [ "${{ steps.create_or_update_pr.outputs.PR_EXISTING_ID }}" != "" ]; then
            echo "Pull request has been updated!"
          else
            echo "Pull request has been created!"
